var buttonColors = ["red", "blue", "green", "yellow"];

//gamePattern array to keep record of pattern generated by nextSequence()
var gamePattern = [];

//userClickedPattern to keep record of user clicks
var userClickedPattern = [];

//You'll need a way to keep track of whether if the game has started or not, so you only call nextSequence() on the first keypress.
var started = true;

// Create a new variable called level and start at level 0, to display level value in heading
var level = 0;


//1. Use jQuery to detect when a keyboard key has been pressed, when that happens for the first time, call nextSequence().
//At start when the key is pressed the game is started
$(document).keypress(function(event){
    if(started) //only for first keypress
    {
        started = false;
        nextSequence();
        
    }
})


// nextSequence will randomly select any color
function nextSequence(){
    userClickedPattern = [];

    var randomNumber = Math.floor(Math.random()*4);
    var randomChosenColour = buttonColors[randomNumber];

    //animating the randomly selected colour
    $("#"+randomChosenColour).fadeOut(100).fadeIn(100);

    playSound(randomChosenColour);

    gamePattern.push(randomChosenColour);
    //console.log(randomChosenColour);
    level = level+1;

    //update the title level wise
    $("#level-title").text("Level "+level);
}

function playSound(name){
    var selectAudio = new Audio("sounds/"+name+".mp3");
    selectAudio.play();
}


//1. Use jQuery to detect when any of the buttons are clicked and trigger a handler function.
// a handler when user clicks the colour
$(".btn").click(function(){

    //2. Inside the handler, create a new variable called userChosenColour to store the id(i.ecolour) of the button that got clicked.
    var userChosenColour = $(this).attr("id");
    
    //4. Add the contents of the variable userChosenColour created in step 2 to the end of this new userClickedPattern
    userClickedPattern.push(userChosenColour);

    animatePress(userChosenColour);
    playSound(userChosenColour);
    //console.log(userClickedPattern);
    checkAnswer(userClickedPattern.length-1);
})

//1. Create a new function called animatePress(), it should take a single input parameter called currentColour.
function animatePress(currentColour){

    //2. Use jQuery to add this pressed class to the button that gets clicked inside animatePress().
    $("#"+currentColour).addClass("pressed");
    
    //3. use Javascript to remove the pressed class after a 100 milliseconds.
    setTimeout(function(){
        $("#"+currentColour).removeClass("pressed")
    },100)
    }
    
    
 // to match the userChosenPattern with gamePattern
function checkAnswer(currentLevel){
    if(gamePattern[currentLevel] === userClickedPattern[currentLevel]){
        //console.log("success");

        if(gamePattern.length === userClickedPattern.length){   //when length is not same, nextSequence() is not called and userChosenPattern[] is not reset
            setTimeout(function(){
                nextSequence();
            },1000)
        }
    }else{
        new Audio("sounds/wrong.mp3").play();

        $("body").addClass("game-over");
        
        setTimeout(function(){
            $("body").removeClass("game-over");
        },200)

        $("#level-title").text("Game Over, Press Any Key to Restart");
        
        startOver();
        
        //console.log("wrong");
    }
    
}

// To restart
function startOver(){
    // game is restarted when the key is pressed, so we have to set started to true for the keypress listener to work
    started = true;
    level = 0;
    gamePattern = [];
}





